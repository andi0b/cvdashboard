{{- $secretName :=  include "cvdashboard.secret" . -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  {{- /*
    retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    set $jwtSecret to existing secret data or generate a random one when not exists
    generate 32 chars long random string, base64 encode it and then double-quote the result string.
  */ -}}
  {{- $secret := lookup "v1" "Secret" .Release.Namespace $secretName }}
  {{- $postgresPassword := ($secret.data).postgresPassword | default (randAlphaNum 32 | b64enc) }}
  {{- $grafanaAdminPassword := ($secret.data).grafanaAdminPassword | default (randAlphaNum 16 | b64enc) }}
  postgresPassword: {{ $postgresPassword | quote }}
  grafanaAdminPassword: {{ $grafanaAdminPassword | quote }}